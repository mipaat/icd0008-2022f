@page
@using Domain.Model.Helpers
@using GameBrain
@using Microsoft.AspNetCore.Html
@using WebApp.MyLibraries
@model Play

<form method="GET" action="">
    <input value="@Model.GameId" name="id" type="hidden">
    @if (Model.PlayerId != null)
    {
        <input value="@Model.PlayerId" name="playerId" type="hidden">
    }
    
    @if (Model.DrawResolutionExpected)
    {
        <div class="text-center">
            <p class="display-6">Your opponent offered to end this game with a draw</p>
            <div class="mb-1">
                <button type="submit" class="btn btn-success" value="@True" name="acceptDraw">Accept Draw</button>
            </div>
            <div>
                <button type="submit" class="btn btn-danger" value="@False" name="acceptDraw">Reject Draw</button>
            </div>
        </div>
    }

    @if (!Model.DrawResolutionExpected)
    {
        <div class="d-flex flex-row flex-wrap gap-2 justify-content-center gameplay-info-bar">
            @if (ShouldDistinguishPlayer)
            {
                <div class="btn btn-light btn-outline-dark fake-button">YOU: @Model.Player</div>
                <div class="btn btn-light btn-outline-dark fake-button">OPPONENT: @Model.Brain.OtherPlayer(Model.Player)</div>
                <div class="btn btn-light btn-outline-dark fake-button">
                    @if (Model.Brain.CurrentTurnPlayer == Model.Player)
                    {
                        @:YOUR TURN
                    }
                    @if (Model.Brain.CurrentTurnPlayer != Model.Player)
                    {
                        @:OPPONENT'S TURN
                    }
                </div>
                @if (CanProposeDraw && !CanForceDraw)
                {
                    <button type="submit" class="btn btn-primary" value="@True" name="proposeDraw">Propose Draw</button>
                }
            }
            @if (!ShouldDistinguishPlayer)
            {
                <div class="btn btn-light btn-outline-dark fake-button">
                    @Model.Player VS @Model.Brain.OtherPlayer(Model.Player)
                </div>
            }
            @if (CanForceDraw)
            {
                <button type="submit" class="btn btn-primary" value="@True" name="forceDraw">Force Draw</button>
            }
            @if (Model.Brain.EndTurnAllowed)
            {
                <button type="submit" class="btn btn-primary" value="@True" name="endTurn">End turn</button>
            }
            <button type="submit" class="btn btn-primary" value="@True" name="forfeit">Forfeit</button>
        </div>

        <div class="overflow-auto">
            <table class="table table-bordered game-board-table">
                <tbody>
                @for (var y = 0; y < Model.Brain.Height; y++)
                {
                    <tr>
                        @for (var x = 0; x < Model.Brain.Width; x++)
                        {
                            var gamePiece = Model.Brain[x, y];
                            <td @GetSelectOnClickText(x, y)
                                class="text-center @GetBoardCellClasses(x, y)">
                                @switch (gamePiece?.Player)
                                {
                                    case EPlayerColor.Black:
                                        @switch (gamePiece.Value.IsCrowned)
                                        {
                                            case false:
                                                <img src="/images/CheckersPieceBlack.png" alt="Black"/>
                                                break;
                                            case true:
                                                <img src="/images/CheckersPieceBlackKing.png" alt="Black Crowned"/>
                                                break;
                                        }
                                        break;
                                    case EPlayerColor.White:
                                        @switch (gamePiece.Value.IsCrowned)
                                        {
                                            case false:
                                                <img src="/images/CheckersPieceWhite.png" alt="White"/>
                                                break;
                                            case true:
                                                <img src="/images/CheckersPieceWhiteKing.png" alt="White Crowned"/>
                                                break;
                                        }
                                        break;
                                }
                            </td>
                        }
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }
</form>

@section Scripts
{
    @if (Model.Brain.IsAiTurn)
    {
        <script>
            window.location = '/CheckersGames/Play?@GetBaseParams()&aiMoveAllowed=true';
        </script>
    }
    @if (Model.PlayerColor != Model.Brain.CurrentTurnPlayerColor)
    {
        <script>
            setTimeout(() => {window.location = '/CheckersGames/Play?@GetBaseParams()'}, 2000)
        </script>
    }
}

@functions
{
    HtmlString GetSelectOnClickText(int x, int y)
    {
        if (Model.IsPieceMovable(x, y))
        {
            return new HtmlString($"onclick=\"window.location = '/CheckersGames/Play?{GetBaseParams()}&fromX={x}&fromY={y}'\"");
        }
        return Model.IsMovableTo(x, y) ? new HtmlString($"onclick=\"window.location = '/CheckersGames/Play?{GetBaseParams()}&fromX={Model.FromX}&fromY={Model.FromY}&toX={x}&toY={y}'\"") : new HtmlString("");
    }

    string GetPlayerIdParam()
    {
        return Model.PlayerId == null ? "" : $"&playerId={Model.PlayerId}";
    }

    HtmlString GetBaseParams()
    {
        return new HtmlString($"id={Model.GameId}{GetPlayerIdParam()}");
    }

    string GetBoardCellClasses(int x, int y)
    {
        return Utils.GetBoardCellBackgroundClass(x, y)
               + (IsSelectedPiece(x, y) ? " selected-piece" : "")
               + (Model.IsMovableTo(x, y) ? " movable-to" : "")
               + (Model.IsPieceMovable(x, y) ? " movable" : "");
    }

    bool IsSelectedPiece(int x, int y)
    {
        return Model.FromSet && Model.FromX == x && Model.FromY == y;
    }

    bool ShouldDistinguishPlayer => Model.PlayerId != null || !IsOnlyAiGame;
    bool IsAiGame => Model.Player.IsAi || Model.Brain.OtherPlayer(Model.Player).IsAi;
    bool IsOnlyAiGame => Model.Player.IsAi && Model.Brain.OtherPlayer(Model.Player).IsAi;
    bool DrawProposed => Model.Brain.CheckersGame.DrawProposedBy != null;
    bool CanProposeDraw => !DrawProposed;
    bool CanForceDraw => !ShouldDistinguishPlayer || IsAiGame;

    static string True => true.ToString();
    static string False => false.ToString();
}