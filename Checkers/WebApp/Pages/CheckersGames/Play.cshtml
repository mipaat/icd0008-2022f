@page
@using Domain
@using Microsoft.AspNetCore.Html
@using GameBrain
@model WebApp.Pages.CheckersGames.Play

@if (Model.DrawResolutionExpected)
{
    <div class="text-center">
        <p class="display-6">Your opponent offered to end this game with a draw</p>
        <form method="GET" action="" class="mb-1">
            <input value="@Model.GameId" name="id" type="hidden">
            @if (Model.PlayerId != null)
            {
                <input value="@Model.PlayerId" name="playerId" type="hidden">
            }
            <input value="@(true.ToString())" name="acceptDraw" type="hidden">
            <button type="submit" class="btn btn-success">Accept Draw</button>
        </form>
        <form method="GET" action="">
            <input value="@Model.GameId" name="id" type="hidden">
            @if (Model.PlayerId != null)
            {
                <input value="@Model.PlayerId" name="playerId" type="hidden">
            }
            <input value="@(false.ToString())" name="acceptDraw" type="hidden">
            <button type="submit" class="btn btn-danger">Reject Draw</button>
        </form>
    </div>
}

@if (!Model.DrawResolutionExpected)
{
    <div class="d-flex flex-row flex-wrap gap-2 justify-content-center gameplay-info-bar">
        <div class="btn btn-light btn-outline-dark fake-button">Current turn: @Model.Brain.CurrentTurnPlayerColor</div>
        @if (Model.PlayerId != null)
        {
            <div class="btn btn-light btn-outline-dark fake-button">@PlayerNameDisplay()</div>
        }
        @if (Model.Brain.EndTurnAllowed)
        {
            <form method="GET" action="">
                <input value="@Model.GameId" name="id" type="hidden">
                @if (Model.PlayerId != null)
                {
                    <input value="@Model.PlayerId" name="playerId" type="hidden">
                }
                <input value="@(true.ToString())" name="endTurn" type="hidden">
                <button type="submit" class="btn btn-primary">End turn</button>
            </form>
        }
        <form method="GET" action="">
            <input value="@Model.GameId" name="id" type="hidden">
            @if (Model.PlayerId != null)
            {
                <input value="@Model.PlayerId" name="playerId" type="hidden">
            }
            <input value="@(true.ToString())" name="forfeit" type="hidden">
            <button type="submit" class="btn btn-primary">Forfeit</button>
        </form>
        @if (Model.Brain.CheckersGame.DrawProposedBy == null)
        {
            <form method="GET" action="">
                <input value="@Model.GameId" name="id" type="hidden">
                @if (Model.PlayerId != null)
                {
                    <input value="@Model.PlayerId" name="playerId" type="hidden">
                }
                <input value="@(true.ToString())" name="proposeDraw" type="hidden">
                <button type="submit" class="btn btn-primary">Propose Draw</button>
            </form>
        }
    </div>

    <div class="overflow-auto">
        <table class="table table-bordered game-board-table">
            <tbody>
            @for (var y = 0; y < Model.Brain.Height; y++)
            {
                <tr>
                    @for (var x = 0; x < Model.Brain.Width; x++)
                    {
                        var gamePiece = Model.Brain[x, y];
                        <td @GetSelectOnClickText(x, y)
                            class="text-center @GetBoardCellClasses(x, y)">
                            @switch (gamePiece?.Player)
                            {
                                case EPlayerColor.Black:
                                    @switch (gamePiece.Value.IsCrowned)
                                    {
                                        case false:
                                            <img src="/images/CheckersPieceBlack.png" alt="Black"/>
                                            break;
                                        case true:
                                            <img src="/images/CheckersPieceBlackKing.png" alt="Black Crowned"/>
                                            break;
                                    }
                                    break;
                                case EPlayerColor.White:
                                    @switch (gamePiece.Value.IsCrowned)
                                    {
                                        case false:
                                            <img src="/images/CheckersPieceWhite.png" alt="White"/>
                                            break;
                                        case true:
                                            <img src="/images/CheckersPieceWhiteKing.png" alt="White Crowned"/>
                                            break;
                                    }
                                    break;
                            }
                        </td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@section Scripts
{
    @if (Model.Brain.IsAiTurn)
    {
        <script>
            window.location = '/CheckersGames/Play?@GetBaseParams()&aiMoveAllowed=true';
        </script>
    }
    @if (Model.PlayerColor != Model.Brain.CurrentTurnPlayerColor)
    {
        <script>
            setTimeout(() => {window.location = '/CheckersGames/Play?@GetBaseParams()'}, 2000)
        </script>
    }
}

@functions
{
    HtmlString GetSelectOnClickText(int x, int y)
    {
        if (Model.IsPieceMovable(x, y))
        {
            return new HtmlString($"onclick=\"window.location = '/CheckersGames/Play?{GetBaseParams()}&fromX={x}&fromY={y}'\"");
        }
        return Model.IsMovableTo(x, y) ? new HtmlString($"onclick=\"window.location = '/CheckersGames/Play?{GetBaseParams()}&fromX={Model.FromX}&fromY={Model.FromY}&toX={x}&toY={y}'\"") : new HtmlString("");
    }

    string GetPlayerIdParam()
    {
        return Model.PlayerId == null ? "" : $"&playerId={Model.PlayerId}";
    }

    HtmlString GetBaseParams()
    {
        return new HtmlString($"id={Model.GameId}{GetPlayerIdParam()}");
    }

    string GetBoardCellClasses(int x, int y)
    {
        return GetBackgroundClass(x, y)
               + (IsSelectedPiece(x, y) ? " selected-piece" : "")
               + (Model.IsMovableTo(x, y) ? " movable-to" : "")
               + (Model.IsPieceMovable(x, y) ? " movable" : "");
    }

    static string GetBackgroundClass(int x, int y)
    {
        return CheckersBrain.IsSquareBlack(x, y) ? "checkers-cell-black" : "checkers-cell-white";
    }

    bool IsSelectedPiece(int x, int y)
    {
        return Model.FromSet && Model.FromX == x && Model.FromY == y;
    }

    String PlayerNameDisplay()
    {
        return $"You are: {Model.PlayerColor}" + (Model.PlayerName != null && Model.PlayerName.Length > 0 ? $" ({Model.PlayerName})" : "");
    }
}